# lighttpd configuration file
#
server.modules              = (
                                "mod_rewrite",
                                "mod_access",
                                "mod_auth",
                                "mod_setenv",								
                                "mod_fastcgi",
                                "mod_cgi",
                               # "mod_accesslog" 
)

## debugging
# 0 for off, 1 for 'auth-ok' messages, 2 for verbose debugging
auth.debug                 = 0

setenv.add-response-header = ( "Access-Control-Allow-Origin" => "*" )

## type of backend
# plain, htpasswd, ldap or htdigest

## for htpasswd
auth.backend               = "htdigest"
auth.backend.htdigest.userfile = "/data/custom/guest_http_passwd"

auth.require = ( "/" =>
(
"method" => "digest",
"realm" => "monitor",
"require" => "valid-user"
)
)
# new directory that I want to make public
$HTTP["url"] =~ "^/mattLib($|/)" {
    dir-listing.activate = "enable"
    auth.require = ()
}


server.document-root        = "/data/custom/html"
$HTTP["url"] =~ "^/mattLib/images/" {
url.access-allow = ("")
}

## where to send error-messages to
server.errorlog             = "/mnt/usbflash/log/lighttpd.log"

# files to check for if .../ is requested
index-file.names            = ( "index.php", "index.html",
                                "index.htm", "default.htm" )

# mimetype mapping
mimetype.assign             = (
  ".pdf"          =>      "application/pdf",
  ".sig"          =>      "application/pgp-signature",
  ".spl"          =>      "application/futuresplash",
  ".class"        =>      "application/octet-stream",
  ".ps"           =>      "application/postscript",
  ".torrent"      =>      "application/x-bittorrent",
  ".dvi"          =>      "application/x-dvi",
  ".gz"           =>      "application/x-gzip",
  ".pac"          =>      "application/x-ns-proxy-autoconfig",
  ".swf"          =>      "application/x-shockwave-flash",
  ".tar.gz"       =>      "application/x-tgz",
  ".tgz"          =>      "application/x-tgz",
  ".tar"          =>      "application/x-tar",
  ".zip"          =>      "application/zip",
  ".mp3"          =>      "audio/mpeg",
  ".m3u"          =>      "audio/x-mpegurl",
  ".wma"          =>      "audio/x-ms-wma",
  ".wax"          =>      "audio/x-ms-wax",
  ".ogg"          =>      "application/ogg",
  ".wav"          =>      "audio/x-wav",
  ".gif"          =>      "image/gif",
  ".jpg"          =>      "image/jpeg",
  ".jpeg"         =>      "image/jpeg",
  ".png"          =>      "image/png",
  ".xbm"          =>      "image/x-xbitmap",
  ".xpm"          =>      "image/x-xpixmap",
  ".xwd"          =>      "image/x-xwindowdump",
  ".css"          =>      "text/css",
  ".html"         =>      "text/html",
  ".htm"          =>      "text/html",
  ".js"           =>      "text/javascript",
  ".asc"          =>      "text/plain",
  ".c"            =>      "text/plain",
  ".cpp"          =>      "text/plain",
  ".log"          =>      "text/plain",
  ".conf"         =>      "text/plain",
  ".text"         =>      "text/plain",
  ".txt"          =>      "text/plain",
  ".dtd"          =>      "text/xml",
  ".xml"          =>      "text/xml",
  ".mpeg"         =>      "video/mpeg",
  ".mpg"          =>      "video/mpeg",
  ".mov"          =>      "video/quicktime",
  ".qt"           =>      "video/quicktime",
  ".avi"          =>      "video/x-msvideo",
  ".asf"          =>      "video/x-ms-asf",
  ".asx"          =>      "video/x-ms-asf",
  ".wmv"          =>      "video/x-ms-wmv",
  ".bz2"          =>      "application/x-bzip",
  ".tbz"          =>      "application/x-bzip-compressed-tar",
  ".tar.bz2"      =>      "application/x-bzip-compressed-tar"
 )

server.tag                 = "GMS by SRT"

#### accesslog module
#accesslog.filename          = "/mnt/usbflash/log/monitor_access.log"

## deny access the file-extensions
#
# ~    is for backupfiles from vi, emacs, joe, ...
# .inc is often used for code includes which should in general not be part
#      of the document-root
url.access-deny             = ( "~", ".inc" )

static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )

## bind to port (default: 80)
server.port = 80
server.pid-file = "/var/run/webserver.pid"

fastcgi.server = ( ".php" => ((
                     "bin-path" => "/usr/bin/php-cgi",
                     "socket" => "/tmp/php.socket",
                     "max-procs" => "1",
                     "bin-environment" => (
                         "PHP_FCGI_CHILDREN" => "1",
                         "PHP_FCGI_MAX_REQUESTS" => "500"
                         )
                 )))


#cgi.assign = ( ".php" => "/usr/bin/php-cgi" )
cgi.assign = ( ".cgi" => "" )

#file upload
server.max-request-size = 1000000
server.network-backend = "writev"
server.upload-dirs=( "/data" )
